<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GitHub+hexo搭建博客网站</title>
    <url>/2023/07/02/GitHub+hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一句</title>
    <url>/2023/07/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
    <content><![CDATA[<p>7&#x2F;28</p>
<p>I am still waiting for you in situ,but you have forgotten you had been here once.</p>
<p>我还在原地等你，你却已经忘记曾来过这里。</p>
<p>7&#x2F;14</p>
<p>Everybody is somebody. Even a nobody.</p>
<p>每个人都有自己的价值，即使是无名之辈。</p>
<hr>
<p>7&#x2F;13</p>
<p>There is light at the end of the tunnel.</p>
<p>守得云开见月明。</p>
]]></content>
      <categories>
        <category>English</category>
        <category>Sentence</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机基础知识</title>
    <url>/2023/10/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="一、数据的表示"><a href="#一、数据的表示" class="headerlink" title="一、数据的表示"></a>一、数据的表示</h1><h2 id="码制-—-⭐"><a href="#码制-—-⭐" class="headerlink" title="码制 —(⭐)"></a>码制 —(⭐)</h2><p>原码：原码就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值。（1为负，0为正）</p>
<p>反码：正数的反码是其原码本身。负数的反码是在其原码的基础上，符号位不变，其余各位取反。</p>
<p>补码：正数的补码是其原码本身。负数的补码是在其原码的基础上，符号位不变，其余各位取反后加1（即在反码的基础上加1）。</p>
<p>移码：将符号位取反的补码（不区分正负）</p>
<details class="blue" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>例子：108<sub>10</sub>的2进制表示 </summary>
              <div class='content'>
              <table><thead><tr><th>编码</th><th>108<sub>10</sub>（sbyte）</th><th>-108<sub>10</sub>（sbyte）</th></tr></thead><tbody><tr><td>原码</td><td><strong>0</strong>1101100</td><td><strong>1</strong>1101100</td></tr><tr><td>反码</td><td><strong>0</strong>1101100</td><td><strong>1</strong>0010011</td></tr><tr><td>补码</td><td><strong>0</strong>1101100</td><td><strong>1</strong>0010100</td></tr><tr><td>移码</td><td><strong>1</strong>1101100</td><td><strong>0</strong>0010100</td></tr></tbody></table>
              </div>
            </details>

<h2 id="浮点数-—-⭐⭐"><a href="#浮点数-—-⭐⭐" class="headerlink" title="浮点数 —(⭐⭐)"></a>浮点数 —(⭐⭐)</h2><h3 id="浮点数与定点数的区别"><a href="#浮点数与定点数的区别" class="headerlink" title="浮点数与定点数的区别"></a>浮点数与定点数的区别</h3><blockquote>
<p>定点数：当机器字长为n时，定点数的补码和移码可表示2<sup>n</sup>个数,原码和反码表示2<sup>n-1</sup>，表示的数值范围小，而且容易造成溢出。<br>浮点数：小数点位置不固定的数，增加了指数部，使得其可以表示更大范围内的数。</p>
</blockquote>
<h3 id="浮点数的格式"><a href="#浮点数的格式" class="headerlink" title="浮点数的格式"></a>浮点数的格式</h3><p>浮点数在计算机中的二进制表达公式为:<strong>N &#x3D; 2<sup>E</sup>M</strong> （其中N为任意二进制数，2位基数，M为尾数，E为阶码）</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.statically.io/gh/GuGuG-G/Blog@main/Knowledge/1-03.png"
                      alt="1-03"
                ></p>
<p>符号位(S)：表示数的正负，1表示负，0表示正</p>
<p>尾数(M)：表示数的小数部分，基为2，用原码或者补码表示。<strong>IEEE754用</strong>原码<strong>表示，其中尾数部分最高位隐藏了一位1，这样是为了多表示一位有效位（临时浮点数无隐含的1）</strong></p>
<p>阶码(E)：表示数的幂，基为2，<strong>阶码&#x3D;真实指数+偏移值</strong>，IEEE754用<strong>移码</strong>表示。</p>
<p>阶符(J)：表示阶码的正负，在IEEE754标准中用移码的数值来表示正负和阶码数值。</p>
<details class="blue" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>关于阶码 (IEEE754标准) </summary>
              <div class='content'>
              <blockquote><ol><li><p>为什么要用移码表示阶码？<br>  补码不能直观的表示数据的大小比如一个8位的数据：<br>  用补码表示 −1<sub>10</sub> &#x3D; 11111111<sub>2</sub> &#x3D; FFH ，8<sub>10</sub>&#x3D; 00001000<sub>2</sub> &#x3D; 08H<br>  8是大于-1的，但是补码的话 FFH &gt; 08H，这与实际结果正好相反。<br>  移码通过加上一个偏置值（若数据为 n 位，则通常取偏置值为2<sup></sup>，将符号位取反即可），能够反映数据之间的实际大小关系。<br>  移码表示 −1<sub>10</sub>&#x3D; 01111111<sub>2</sub>&#x3D; 7FH ， 8<sub>10</sub>&#x3D; 10001000<sub>2</sub> &#x3D; 88H<br>88H &gt; 7FH 这与预期结果相符合。</p></li><li><p>阶码偏移值（偏置值）<br>  阶码部分用移码表示，假设阶码为 n 位，则规定阶码偏置值取 2<sup>n-1</sup> −1，因此短浮点数、长浮点数、临时浮点数阶码偏置值为移码偏置值不是2<sup>n-1</sup>,为什么是2<sup>n-1</sup>-1，因为阶码全1是用来表示特殊用途。</p></li><li><p>阶码的取值范围<br>  假设阶码为 n 位，则可表示的范围为 0 到 2<sup>10</sup> -1,因此短浮点数、长浮点数的阶码取值范围为 0到255、0到2047。又因为当阶码全0、阶码全1时有特殊用途，所以阶码E的实际取值范围为 1到254、1到2046（去掉阶码全0和全1）。</p></li></ol></blockquote>
              </div>
            </details>

<details class="blue" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>例：176.0625<sub>10</sub> = 1011 0000.0001<sub>2</sub> </summary>
              <div class='content'>
              <p>进行规格化处理：1011 0000.0001 &#x3D; 1.0110 0000 001 x 2<sup>7</sup>（注意这里是IEEE754规格化，并非一般规格化）</p><p>符号位：整数为0</p><p>尾数：去掉小数点前的1将会其后的二进制小数拓展为23位尾数：0110 0000 0010 0000 0000 000（23位）</p><p>阶码：真实指数加上偏移值，E&#x3D;7+127&#x3D;134 &#x3D; 10000110<sub>2</sub></p><p>浮点数形式：0  10000110  01100000001000000000000</p>
              </div>
            </details>

<h3 id="一般规格化浮点数"><a href="#一般规格化浮点数" class="headerlink" title="一般规格化浮点数"></a>一般规格化浮点数</h3><p>很明显一个数的浮点数表示并不唯一，且浮点数的数值表示范围由阶码决定，数值的精度由尾数决定。规格化浮点数就是为了充分利用位数来表示有效数字。<br>规格化浮点数就是将尾数的绝对值限定在在区间[0.5,1]</p>
<h4 id="原码-x2F-补码规格化位数"><a href="#原码-x2F-补码规格化位数" class="headerlink" title="原码&#x2F;补码规格化位数"></a>原码&#x2F;补码规格化位数</h4><table>
<thead>
<tr>
<th>码制</th>
<th>符号位</th>
<th>正数</th>
<th>负数</th>
<th>表示数值范围</th>
</tr>
</thead>
<tbody><tr>
<td>原码</td>
<td>单号符号位</td>
<td>0.1XXXX</td>
<td>1.1XXXX</td>
<td>[0.5,1]</td>
</tr>
<tr>
<td>原码</td>
<td>双号符号位</td>
<td>00.1XXXX</td>
<td>11.1XXXX</td>
<td>[-1,-0.5]</td>
</tr>
<tr>
<td>补码</td>
<td>单号符号位</td>
<td>0.1XXXX</td>
<td>1.0XXXX</td>
<td>[0.5,1]</td>
</tr>
<tr>
<td>补码</td>
<td>双号符号位</td>
<td>00.1XXXX</td>
<td>11.0XXXX</td>
<td>[-1,-0.5]</td>
</tr>
</tbody></table>
<p><strong>采用双符号位可以很方便地判断溢出的问题</strong></p>
<h4 id="IEEE754规格化浮点数"><a href="#IEEE754规格化浮点数" class="headerlink" title="IEEE754规格化浮点数"></a>IEEE754规格化浮点数</h4><p>IEEE754标准的浮点数有短浮点数（单精度、float型）、长浮点数（双精度、double型）、临时浮点数这三种规格化格式。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>字长</th>
<th>符号位</th>
<th>阶码</th>
<th>尾数</th>
<th>最大指数</th>
<th>最小指数</th>
<th>可表示的实数范围</th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>32bit</td>
<td>1 bit</td>
<td>8 bit</td>
<td>23 bit</td>
<td>+127</td>
<td>-126</td>
<td>10^-38^ ~ 10^38^</td>
</tr>
<tr>
<td>double</td>
<td>64bit</td>
<td>1 bit</td>
<td>11 bit</td>
<td>52 bit</td>
<td>+1023</td>
<td>-1022</td>
<td>10^-308^ ~ 10^308^</td>
</tr>
<tr>
<td>long double</td>
<td>80bit</td>
<td>1 bit</td>
<td>15bit</td>
<td>64bit</td>
<td>+16383</td>
<td>-16382</td>
<td>10^-4932^ ~ 10^4932^</td>
</tr>
</tbody></table>
<details class="gray" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>根据IEEE754标准的编码的值分为（规格化，非规格化，特殊值）这三种情况 </summary>
              <div class='content'>
              <p class='h5' id="规格化的值"><a href="#规格化的值" class="headerlink" title="规格化的值"></a>规格化的值</h5><p>当阶码部分全为0也不全为1时，即为规格化的值。</p><p>对于尾数部分，预定小数点左边隐含有一位1，因此单精度浮点数的有效位数为24位，即位数为1.a<sub>1</sub>..a<sub>23</sub></p><h5 id="非规格化"><a href="#非规格化" class="headerlink" title="非规格化"></a>非规格化</h5><p>当阶码部分全为0，即为非规格化的值。</p><p>可以这样理解当一个很小的小数，再进行一般规格化处理时，向左偏移了最大偏移量127次以后，阶码部分是0</p><p>非规格化的两个用途：</p><blockquote><ol><li><p>用来表示数值0</p><p>当符号位为1，其余皆为零时，此时为+0.0，而符号位为0时为-0.0.</p></li><li><p>无限接近0的数</p><p>因为规格化的表示方法下无法表示出0 (因为尾数始终大于1)，所以要使用非规格化的值。</p></li></ol></blockquote><h5 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h5><p>当阶码部分全为1时，即为特殊值</p><blockquote><p>当尾数部分全为零时，表示无穷大。</p><p>当尾数部分不全为零时，表示NaN（不是一个数）</p></blockquote>
              </div>
            </details>

<h3 id="浮点数运算"><a href="#浮点数运算" class="headerlink" title="浮点数运算"></a>浮点数运算</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>设有两个浮点数X、Y,实现X±Y，X&#x3D;M<sub>x</sub>2<sup>Ey</sup>,Y&#x3D;M<sub>x</sub>y2<sup>Ey</sup>均为规格化数</p>
<h4 id="运算步骤"><a href="#运算步骤" class="headerlink" title="运算步骤"></a>运算步骤</h4><ol>
<li>对阶</li>
</ol>
<blockquote>
<p> 使两个数的阶码相同，令K&#x3D;|E<sub>x</sub>-E<sub>y</sub>|，把阶码小的数向右移K位，使其阶码加上K。</p>
</blockquote>
<ol start="2">
<li>尾数求和（差）</li>
</ol>
<blockquote>
<p>执行对阶后，两尾数进行加&#x2F;减运算，得到两数之和&#x2F;差。</p>
</blockquote>
<ol start="3">
<li>规格化并判断溢出</li>
</ol>
<blockquote>
<p>若运算的结果所得不是规格化数，则需要进行规格化处理，当尾数溢出时，需要调整阶码</p>
</blockquote>
<details class="blue" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>如何进行规格化 </summary>
              <div class='content'>
              <p>规格化规则</p><p>右规：如果结果的两个符号位的值不同，表示加减法运算尾数结果溢出。此时将尾数结果右移1位，阶码E+1，称为向右规格化。<br>左规：如果结果的两个符号位的值相同，表示加减法运算尾数结果不溢出。若最高数值位与符号位相同，此时尾数连续左移，直到最高数值位与符号位的值不同为止。同时 E-m(移位的位数) ,称为向左规格化</p>
              </div>
            </details>

<ol start="4">
<li>舍入处理</li>
</ol>
<blockquote>
<p>结果右归时位数的最低位将因移出而丢掉，求得最小运算差。</p>
</blockquote>
<ol start="5">
<li>溢出判别</li>
</ol>
<blockquote>
<p>以阶码为准，若阶码溢出，运算结果溢出，阶码下溢，结果为零</p>
</blockquote>
<h1 id="二、校验码-—-⭐⭐⭐"><a href="#二、校验码-—-⭐⭐⭐" class="headerlink" title="二、校验码 — (⭐⭐⭐)"></a>二、校验码 — (⭐⭐⭐)</h1><p><strong>意义</strong>：校验码是为了确保数据在传送过程中正确无误，一是提高硬件电路的而可靠请，二是提高代码的校验能力。</p>
<p><strong>码距</strong>：是指一个编码系统中任意两个合法编码之间至少有多少二进制位不同。</p>
<blockquote>
<p>校验码就是在码距的原理上产生的，码距越大校验能力，纠错能力越强，所以奇偶校验码、海明码、CRC码究其原理都是利用一系列规则提升一段码字的码距而已.</p>
</blockquote>
<details class="blue" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>如何理解码距 </summary>
              <div class='content'>
              <p class='h5' id="用3bit的数据表示八种不同的信息"><a href="#用3bit的数据表示八种不同的信息" class="headerlink" title="用3bit的数据表示八种不同的信息"></a>用3bit的数据表示八种不同的信息</h5><table><thead><tr><th>序数</th><th>a<sub>2</sub></th><th>a<sub>1</sub></th><th>a<sub>0</sub></th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>2</td><td>0</td><td>1</td><td>0</td></tr><tr><td>3</td><td>0</td><td>1</td><td>1</td></tr><tr><td>4</td><td>1</td><td>0</td><td>0</td></tr><tr><td>5</td><td>1</td><td>0</td><td>1</td></tr><tr><td>6</td><td>1</td><td>1</td><td>0</td></tr><tr><td>7</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>观察可知任意两个信息种至少有一个码数不相同，其中任意一个字符错误都可以变成另一个合法的编码，因此不具有检错能力。</p><h5 id="再用4bit的数据表示八种不同的信息"><a href="#再用4bit的数据表示八种不同的信息" class="headerlink" title="再用4bit的数据表示八种不同的信息"></a>再用4bit的数据表示八种不同的信息</h5><table><thead><tr><th>序数</th><th>a<sub>3</sub></th><th>a<sub>2</sub></th><th>a<sub>1</sub></th><th>a<sub>0</sub></th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>2</td><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>3</td><td>0</td><td>0</td><td>1</td><td>1</td></tr><tr><td>4</td><td>1</td><td>1</td><td>0</td><td>0</td></tr><tr><td>5</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>6</td><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>7</td><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>观察可知任意两个信息至少保持两个码数不同 ,此时可以称码距为2。</p><p>如果此时任意一个数据种的任意一个数据位发生改变都将无法匹配到有效的信息位，如此便有了检错能力。</p>
              </div>
            </details>

<details class="blue" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>码距与检错和纠错能力的关系 </summary>
              <div class='content'>
              <table><thead><tr><th>码距</th><th>码检错能力</th><th>码纠错能力</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>2</td><td>1</td><td>0</td></tr><tr><td>3</td><td>2或1</td><td>2或1</td></tr><tr><td>4</td><td>2加1</td><td>2加1</td></tr><tr><td>5</td><td>2加2</td><td>2加2</td></tr><tr><td>6</td><td>3加2</td><td>3加2</td></tr><tr><td>7</td><td>3加3</td><td>3加3</td></tr></tbody></table><blockquote><p>码距越大，纠错能力越强，但数据冗余也越大，即编码效率低了</p></blockquote>
              </div>
            </details>

<h2 id="奇偶校验-—-⭐"><a href="#奇偶校验-—-⭐" class="headerlink" title="奇偶校验 — (⭐)"></a>奇偶校验 — (⭐)</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><blockquote>
<p>通过在编码中增加一位校验位来使编码中的1的个数为奇数（奇校验）或偶数（偶校验），从而使码距为2</p>
</blockquote>
<ul>
<li><p>奇校验：如果二进制数据中1的个数是奇数，则是奇校验</p>
</li>
<li><p>偶校验：如果二进制数据中1的个数是偶数，则是偶校验</p>
</li>
</ul>
<blockquote>
<p>注:采用何种校验必须事先规定好的，通常传输的数据会专门设置一个奇偶校验位。</p>
</blockquote>
<table>
<thead>
<tr>
<th>原数据</th>
<th>奇校验</th>
<th>偶校验</th>
</tr>
</thead>
<tbody><tr>
<td>1011000_</td>
<td>1011000<strong>0</strong></td>
<td>1011000<strong>1</strong></td>
</tr>
<tr>
<td>0011000_</td>
<td>0011000<strong>1</strong></td>
<td>0011000<strong>0</strong></td>
</tr>
<tr>
<td>0001000_</td>
<td>0001000<strong>0</strong></td>
<td>0001000<strong>1</strong></td>
</tr>
</tbody></table>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>奇偶校验码只能查是否有错误，而且要求只有一位出现错误。</p>
<h2 id="海明编码-—-⭐⭐⭐"><a href="#海明编码-—-⭐⭐⭐" class="headerlink" title="海明编码 —(⭐⭐⭐)"></a>海明编码 —(⭐⭐⭐)</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>海明码是通过在数据为之间的特定位置插入k个校验码，通过扩大码距来实现检错和纠错。最小码距为3</p>
<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>设数据位是n位,校验位是k位，n和k满足如下关系：2<sup>k</sup>&gt;&#x3D;n+k+1</p>
<h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><blockquote>
<p>设k个校验码P<sub>k</sub>,…,P<sub>1</sub>,n个数据位D<sub>n-1</sub>,…,D<sub>0</sub></p>
</blockquote>
<ol>
<li><p>校验码P<sub>i</sub>在海明码中的第2<sup>i-1</sup>,数据为依次从第到高占据海明码剩下位置</p>
</li>
<li><p>海明码中的任以为都有若干个校验码来校验。对应关系为：被校验的海明码下标等于所有参与校验该位的校验码下标之和。</p>
</li>
</ol>
<p>例：</p>
<p>确定如下海明码校验关系</p>
<table>
<thead>
<tr>
<th>H1</th>
<th>H2</th>
<th>H3</th>
<th>H4</th>
<th>H5</th>
<th>H6</th>
<th>H7</th>
<th>H8</th>
<th>H9</th>
<th>H10</th>
<th>H11</th>
<th>H12</th>
</tr>
</thead>
<tbody><tr>
<td>P1</td>
<td>P2</td>
<td>D0</td>
<td>P3</td>
<td>D1</td>
<td>D2</td>
<td>D3</td>
<td>P4</td>
<td>D4</td>
<td>D5</td>
<td>D6</td>
<td>D7</td>
</tr>
</tbody></table>
<p>数据位与校验码关系：</p>
<table>
<thead>
<tr>
<th>数据位</th>
<th>海明码</th>
<th>校验位</th>
</tr>
</thead>
<tbody><tr>
<td>D1</td>
<td>H5</td>
<td>P1+P3</td>
</tr>
<tr>
<td>D2</td>
<td>H6</td>
<td>P2+P3</td>
</tr>
<tr>
<td>D3</td>
<td>H7</td>
<td>P3+P2+P1</td>
</tr>
<tr>
<td>D4</td>
<td>H9</td>
<td>P4+P1</td>
</tr>
<tr>
<td>D5</td>
<td>H10</td>
<td>P4+P2</td>
</tr>
<tr>
<td>D6</td>
<td>H11</td>
<td>P4+P2+P1</td>
</tr>
<tr>
<td>D7</td>
<td>H12</td>
<td>P4+P3</td>
</tr>
</tbody></table>
<h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>既可检错又可纠错</p>
<h2 id="循环冗余-—-⭐"><a href="#循环冗余-—-⭐" class="headerlink" title="循环冗余 —(⭐)"></a>循环冗余 —(⭐)</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在串行传送（磁盘、通讯）中，广泛采用循环冗余校验码（CRC）。奇偶校验码和海明校验码都是采用奇偶检测为手段榆错和纠错的，而循环冗余校验则是通过某种数学运算来建立数据位和校验位的约定关系。</p>
<h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><p>可检错，不可纠错。</p>
]]></content>
      <categories>
        <category>计算机组成与体系结构</category>
        <category>计算机基础知识</category>
      </categories>
      <tags>
        <tag>浮点数</tag>
        <tag>原码</tag>
        <tag>反码</tag>
        <tag>补码</tag>
        <tag>移码</tag>
        <tag>计组</tag>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成</title>
    <url>/2023/10/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/</url>
    <content><![CDATA[<h1 id="计算机的基本组成"><a href="#计算机的基本组成" class="headerlink" title="计算机的基本组成"></a>计算机的基本组成</h1><p>计算机的基本硬件系统又运算器、控制器、存储器、输入&#x2F;输出设备5大部分组成。其中运算器、控制器等部件被集成在一起称为中央处理单元（CPU）,存储器是计算机的记忆设备，，输入输出设备合称外设。</p>
<h2 id="中央处理单元CPU"><a href="#中央处理单元CPU" class="headerlink" title="中央处理单元CPU"></a>中央处理单元CPU</h2><p>CPU计算机系统的核心不见，它负责获取程序指令对指令进行译码加以执行</p>
<h3 id="CPU的功能"><a href="#CPU的功能" class="headerlink" title="CPU的功能"></a>CPU的功能</h3><ol>
<li><p>程序(指令)控制</p>
<blockquote>
<p>按照顺序进行取指操作，由控制器CU完成取指和分析指令的操作。</p>
</blockquote>
</li>
<li><p>操作控制</p>
<blockquote>
<p>能对指令进行译码、寄存、执行的有关操作。</p>
</blockquote>
</li>
<li><p>时间控制</p>
<blockquote>
<p>对各种操作进行的时间实施定时。</p>
</blockquote>
</li>
<li><p>数据处理</p>
<blockquote>
<p>够进行算术运算和逻辑运算，该功能的实现由ALU寄存器（算术逻辑单元）完成。</p>
</blockquote>
</li>
<li><p>处理中断</p>
<blockquote>
<p>能够响应输入输出设备发出的中断请求。</p>
</blockquote>
</li>
</ol>
<h3 id="CPU组成"><a href="#CPU组成" class="headerlink" title="CPU组成"></a>CPU组成</h3><p>CPU的主要组成由运算器、控制器、寄存器和内部总线等部件组成</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.statically.io/gh/GuGuG-G/Blog@main/Knowledge/2-01.png"
                      alt="2-01"
                ></p>
<h4 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h4><h5 id="运算器的功能"><a href="#运算器的功能" class="headerlink" title="运算器的功能"></a>运算器的功能</h5><blockquote>
<p>执行所有的算术运算</p>
<p>执行所有的罗技运算并进行逻辑测试</p>
</blockquote>
<h5 id="运算器的组成"><a href="#运算器的组成" class="headerlink" title="运算器的组成"></a>运算器的组成</h5><p>算数逻辑单元（ALU）</p>
<p>累加寄存器（AC）</p>
<p>数据缓冲寄存器（DR）</p>
<p>状态条件寄存器（PSW）</p>
<h4 id="控制器-CU，Control-Unit"><a href="#控制器-CU，Control-Unit" class="headerlink" title="控制器(CU，Control Unit)"></a>控制器(CU，Control Unit)</h4><p>控制CPU的工作，控制器一般由 指令控制逻辑，时序控制逻辑、总线控制逻辑和终端控制逻辑。</p>
<h5 id="控制器的功能"><a href="#控制器的功能" class="headerlink" title="控制器的功能"></a>控制器的功能</h5><p>取指令：指令控制</p>
<p>分析指令：操作控制</p>
<p>执行指令，发出各种操作命令控制程序输入及结果的输出：时间控制</p>
<p>总线管理：处理中断</p>
<p>处理异常情况和特殊请求：数据加工</p>
<h5 id="控制器的组成"><a href="#控制器的组成" class="headerlink" title="控制器的组成"></a>控制器的组成</h5><p>指令寄存器（IR）</p>
<p>程序计数器（PC）</p>
<p>地址寄存器（AR）</p>
<p>指令译码器（ID）</p>
<h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><p>寄存器是用来暂时保存运算和控制过程中的原始数据，中间结果，最终结果以及控制、状态信息的。CPU的寄存器被分为：用户可见寄存器、控制和状态寄存器</p>
<h5 id="用户可见寄存器"><a href="#用户可见寄存器" class="headerlink" title="用户可见寄存器"></a>用户可见寄存器</h5><p>通用寄存器：存放原始数据和运算结果，一般由CPU直接访问，CPU对寄存器的访问速度远大于访问主存的速度。</p>
<p>数据寄存器：存放操作数、运算结果和运算的中间结果，以减少访问存储器的次数。寄存了将要写入到计算机主存储器（例如：RAM）的数据，或由计算机主存储器读取后的数据。它就像缓冲器，持有从内存复制的数据，以准备给处理器使用。</p>
<p>地址寄存器：用来保存当前CPU所访问的内存单元的地址。由于在内存和CPU之间存在着操作速度上的差别，所以必须使用地址寄存器来保持地址信息，直到内存的读&#x2F;写操作完成为止 。</p>
<p>条件码寄存器：存放条件码（条件码：体现当前指令执行结果的各种状态信息，如有无进位（CF位）、有无溢出（OV位）、结果正负（SF位）、结果是否为零（ZF位）、奇偶标志位（P位）等），可作程序分支的依据。</p>
<h5 id="控制和状态寄存器"><a href="#控制和状态寄存器" class="headerlink" title="控制和状态寄存器"></a>控制和状态寄存器</h5><p>控制寄存器：控制寄存器（CR0～CR3）用于控制和确定处理器的操作模式以及当前执行任务的特性。</p>
<p>PSW寄存器：保存由算数指令和逻辑指令运算或测试结果建立的各种条件码，保存中断和系统工作状态等信息。</p>
<h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><h3 id="层次化存储结构"><a href="#层次化存储结构" class="headerlink" title="层次化存储结构"></a>层次化存储结构</h3><h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><h3 id="主存编址"><a href="#主存编址" class="headerlink" title="主存编址"></a>主存编址</h3><h2 id="I-x2F-O数据传输控制方式"><a href="#I-x2F-O数据传输控制方式" class="headerlink" title="I&#x2F;O数据传输控制方式"></a>I&#x2F;O数据传输控制方式</h2><h2 id="总线系统"><a href="#总线系统" class="headerlink" title="总线系统"></a>总线系统</h2>]]></content>
      <categories>
        <category>计算机组成与体系结构</category>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>CPU</tag>
        <tag>存储系统</tag>
        <tag>I/O数据传输方式</tag>
        <tag>总线控制</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机操作系统</title>
    <url>/2023/10/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>计算机组成与体系结构</category>
        <category>计算机基础知识</category>
      </categories>
      <tags>
        <tag>文件管理</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/11/16/Unity%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%BC%80%E5%8F%91/Unity%E9%9D%A2%E8%AF%95/Unity%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%20%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<p>#Unity面试题</p>
<h2 id="C-基础"><a href="#C-基础" class="headerlink" title="C#基础"></a>C#基础</h2><ol>
<li><p>private与internal的区别？ </p>
<p>private:可以修饰类（嵌套类）、属性、方法，表示类、结构体的内部是可见的。</p>
<p>internal:表示程序集可见</p>
</li>
<li><p>如何理解装箱拆箱，那个更耗内存为什么？</p>
<p>拆箱：将引用类型转换成值类型，本身不会的导致在堆上分配内存，只是将堆上的值拷贝到栈上。</p>
<p>装箱：将值类型转换成引用类型，会在堆上分配内存，并将栈上的值拷贝到堆中。</p>
<p>装箱会更耗，因为会导致堆内存的分配。</p>
</li>
<li><p>in和ref的异同</p>
<p>相同：in和ref都表示以引用的方式传值，进行性能优化</p>
<p>不同：in：只读的引用传递，使用时参数不需要初始化，<br>        ref：可读可写的引用传递，使用时参数需要初始化</p>
</li>
<li><p>override和new在修饰函数的时候的区别。</p>
<p>override ：表示在派生类中重写了基类中的虚方法，是实现多态性的关键。</p>
<p>new：表示在派生类中提供了一个新的隐藏方法，该方法与基类中的同名方法无关，不构成方法的重写，与多态无关。</p>
</li>
<li><p>interface和abstract类的区别</p>
</li>
</ol>
<p>  interface: </p>
<ul>
<li>接口只包含方法、属性、索引器和事件的声明，不包含实现，字段。</li>
<li>类可以实现多个接口，从而实现多重继承</li>
<li>接口中的成员默认为公共的，不允许包含访问修饰符。</li>
<li>接口用于定义类之间的契约，实现接口的类必须提供接口中定义的所有成员的具体实现。</li>
<li>接口可以帮助实现代码的松耦合，提高代码的灵活性和可维护性。</li>
</ul>
<p>   abstract：</p>
<ul>
<li>抽象类可以包含字段、构造函数、属性、抽象方法和具体方法的实现。</li>
<li>类只能继承一个抽象类</li>
<li>抽象可以包含访问修饰符</li>
<li>抽象类不能被实例化，只能用作基类</li>
<li>子类必须实现抽象类中的所有抽象方法，但可以选择性地重写具体方法</li>
</ul>
<p>  总结：</p>
<ul>
<li><p>接口用于定义类之间的契约，强调类实现的行为。</p>
</li>
<li><p>抽象类用于定义类的结构和行为，强调类的层次结构。</p>
</li>
<li><p>如果一个类需要表示 is-a 关系，并且具有一些通用的实现，可以使用抽象类。如果一个类需要表示 has-a 关系，可以使用接口。</p>
</li>
</ul>
<ol start="6">
<li><p>一个空的类对象，会占用内存么？</p>
<p>会的。一个空对象占用24字节。在.NET框架中，每个对象都包含一个对象头（object header），在64位系统上通常是8字节。</p>
<ul>
<li>对象头：8字节</li>
<li>类型信息：8字节</li>
<li>字段对其：8字节</li>
</ul>
</li>
<li><p>类型的成员函数会占用对象的内存么？</p>
<p>不会。函数本身是一对指令的集合，存放在程序的元数据中。</p>
</li>
<li><p>结构体的默认内存布局是怎么样的？</p>
</li>
</ol>
<ul>
<li><p>元素开始的地址是其字节大小的整数倍</p>
</li>
<li><p>struct的大小是其最大元素字节大小的整数倍</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Struct_1</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> a;<span class="comment">//4byte</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">long</span> b;<span class="comment">//8byte</span></span><br><span class="line">&#125;<span class="comment">//大小为16byte</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<ol start="9">
<li><p>结构体当Key的时候怎么才能避免GC,为什么?<br>结构体当key,产生GC的原因:</p>
<ul>
<li>object的GetHashCode来计算在桶中的index</li>
<li>IEquatable接口进行key的比较，结构体会装箱成object。</li>
</ul>
<p>结构体只要重写GetHashCode方法和实现IEquatable接口就能避免GC。</p>
</li>
<li><p>stackalloc的作用</p>
<p>当需要临时存储少量数据并且性能要求太高时，可以使用stackalloc在栈上分配内存来避免堆分配和垃圾回收的开销，要注意因为栈的空间有限，分调太大的内存肯能导致栈的溢出。</p>
</li>
<li><p>在try-catch-finally 结构的catch中throw一个新的异常后，finally在代码还会执行么。</p>
<p>会。 </p>
<p>finally代码保证一定会执行，就算再try直接return，finally也会执行</p>
</li>
<li><p>span和memory主要有什么区别？</p>
<p>span是一个ref struct，只能在栈上分配，不能作为类的成员字段，不能用于异步方法。memory可以在堆上分配，能过够用于异步方法，也能作为类的成员函数，span的性能更高。</p>
</li>
</ol>
]]></content>
  </entry>
</search>
