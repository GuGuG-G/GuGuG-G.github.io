<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GitHub+hexo搭建博客网站</title>
    <url>/2023/07/02/GitHub+hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一句</title>
    <url>/2023/07/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/</url>
    <content><![CDATA[<p>7&#x2F;28</p>
<p>I am still waiting for you in situ,but you have forgotten you had been here once.</p>
<p>我还在原地等你，你却已经忘记曾来过这里。</p>
<p>7&#x2F;14</p>
<p>Everybody is somebody. Even a nobody.</p>
<p>每个人都有自己的价值，即使是无名之辈。</p>
<hr>
<p>7&#x2F;13</p>
<p>There is light at the end of the tunnel.</p>
<p>守得云开见月明。</p>
]]></content>
      <categories>
        <category>English</category>
        <category>Sentence</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制中的整数与小数</title>
    <url>/2023/09/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%8E%E5%B0%8F%E6%95%B0/</url>
    <content><![CDATA[<h2 id="二进制数转换成十进制数"><a href="#二进制数转换成十进制数" class="headerlink" title="二进制数转换成十进制数"></a>二进制数转换成十进制数</h2><p>将一个十进制小数转换成二进制，通常将二进制数写成加权系数展开式，然后按十进制加法规则求和。这种做法称为”<strong>按权相加</strong>“法。</p>
<p>可以将这个二进制小数理解为凑小数，正是因为如此二进制小数运算并不精确。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.statically.io/gh/GuGuG-G/Blog@main/Knowledge/1-01.png"
                      alt="1-01"
                ></p>
<h2 id="十进制数转换成二进制数"><a href="#十进制数转换成二进制数" class="headerlink" title="十进制数转换成二进制数"></a>十进制数转换成二进制数</h2><p>十进制数转换为二进制数时，将十进制数的整数部分和小数部分分别转换后，再加以合并。</p>
<ol>
<li>整数转换成二进制整数</li>
</ol>
<p>十进制整数转换为二进制整数采用”<strong>除2取余，逆序排列</strong>“法。</p>
<ol start="2">
<li>整数转换成二进制整数</li>
</ol>
<p>十进制小数转换成二进制小数采用”**乘2取整，顺序排列”**法。</p>
]]></content>
      <categories>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>二进制</tag>
        <tag>计组</tag>
      </tags>
  </entry>
  <entry>
    <title>原码、反码、补码和移码</title>
    <url>/2023/10/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%81%E5%92%8C%E7%A7%BB%E7%A0%81/</url>
    <content><![CDATA[<p>原码、反码、补码和移码</p>
<ul>
<li>原码：</li>
<li>反码：</li>
<li>补码：</li>
<li>移码：</li>
</ul>
<p>例子：</p>
<table>
<thead>
<tr>
<th>编码</th>
<th>10810（sbyte）</th>
<th>-10810（sbyte）</th>
</tr>
</thead>
<tbody><tr>
<td>原码</td>
<td><strong>0</strong>1101100</td>
<td><strong>1</strong>1101100</td>
</tr>
<tr>
<td>反码</td>
<td><strong>0</strong>1101100</td>
<td><strong>1</strong>0010011</td>
</tr>
<tr>
<td>补码</td>
<td><strong>0</strong>1101100</td>
<td><strong>1</strong>0010100</td>
</tr>
<tr>
<td>移码</td>
<td><strong>1</strong>1101100</td>
<td><strong>0</strong>0010100</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>计组</tag>
        <tag>原码</tag>
        <tag>反码</tag>
        <tag>补码</tag>
        <tag>移码</tag>
      </tags>
  </entry>
  <entry>
    <title>数据表示</title>
    <url>/2023/10/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>计组</tag>
        <tag>原码</tag>
        <tag>反码</tag>
        <tag>补码</tag>
        <tag>移码</tag>
        <tag>浮点数</tag>
      </tags>
  </entry>
  <entry>
    <title>浮点数与定点数</title>
    <url>/2023/10/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E6%B5%AE%E7%82%B9%E6%95%B0/</url>
    <content><![CDATA[<h3 id="定点数与浮点数的区别"><a href="#定点数与浮点数的区别" class="headerlink" title="定点数与浮点数的区别"></a>定点数与浮点数的区别</h3><h4 id="定点数"><a href="#定点数" class="headerlink" title="定点数"></a>定点数</h4><p>当机器字长为n时，定点数的补码和移码可表示2^n个数,原码和反码表示2^n，表示的数值范围小，而且容易造成溢出。</p>
<h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>小数点位置不固定的数，增加了指数部，使得其可以表示更大范围内的数。</p>
<p>浮点数计算机中任意二进制表示为:N &#x3D;<font color = yellow> 2<sup>E</sup>M</font> （其中N为任意二进制数，2位基数，M为尾数，E为阶码）</p>
<h6 id="组成结构"><a href="#组成结构" class="headerlink" title="组成结构"></a>组成结构</h6><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.statically.io/gh/GuGuG-G/Blog@main/Knowledge/1-03.png"
                      alt="1-03"
                ></p>
<p><strong>符号位</strong>表示这个数据的正负，0表示正数，1表示负数</p>
<p><strong>阶码</strong>表示指数部分</p>
<p><strong>尾数</strong>表示小数部分</p>
<details class="gray" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>例：176.0625<sub>10</sub> = 1011 0000.0001<sub>2</sub> </summary>
              <div class='content'>
              <p>进行规格化处理：1011 0000.0001 &#x3D; 1.0110 0000 001 x 2<sup>7</sup></p><p>符号位：整数为0</p><p>尾数：去掉小数点前的1将会其后的二进制小数拓展为23位尾数：0110 0000 0010 0000 0000 000（23位）</p><p>阶码：真实指数加上偏移值，E&#x3D;7+127&#x3D;134 &#x3D; 10000110<sub>2</sub></p><p>浮点数形式：0  10000110  01100000001000000000000</p>
              </div>
            </details>

<h4 id="浮点数的三种数据类型"><a href="#浮点数的三种数据类型" class="headerlink" title="浮点数的三种数据类型"></a>浮点数的三种数据类型</h4><table>
<thead>
<tr>
<th>数据类型</th>
<th>字长</th>
<th>符号位</th>
<th>阶码</th>
<th>尾数</th>
<th>最大指数</th>
<th>最小指数</th>
<th>可表示的实数范围</th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>32bit</td>
<td>1 bit</td>
<td>8 bit</td>
<td>23 bit</td>
<td>+127</td>
<td>-126</td>
<td>10^-38^ ~ 10^38^</td>
</tr>
<tr>
<td>double</td>
<td>64bit</td>
<td>1 bit</td>
<td>11 bit</td>
<td>52 bit</td>
<td>+1023</td>
<td>-1022</td>
<td>10^-308^ ~ 10^308^</td>
</tr>
<tr>
<td>long double</td>
<td>80bit</td>
<td>1 bit</td>
<td>15bit</td>
<td>64bit</td>
<td>+16383</td>
<td>-16382</td>
<td>10^-4932^ ~ 10^4932^</td>
</tr>
</tbody></table>
<p>IEEE 754标准的浮点数有短浮点数（单精度、float型）、长浮点数（双精度、double型）、临时浮点数三种，且数据由三部分组成：</p>
<ul>
<li><p>符号位(S)：尾数的符号位。1表示负；0表示正</p>
</li>
<li><p>尾数(M)：表示数的小数部分，基为2，用原码表示。<strong>且隐藏了一位1，这样是为了多表示一位有效位（临时浮点数无隐含的1）</strong></p>
</li>
<li><p>阶码(E)：表示数的幂，基为2，<strong>阶码&#x3D;真实指数+偏移值</strong>，用<strong>移码</strong>表示。</p>
<details class="blue" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>关于阶码 </summary>
              <div class='content'>
              <blockquote><ol><li><p>为什么要用移码表示阶码？<br>  补码不能直观的表示数据的大小比如一个8位的数据：<br>  用补码表示 −1<sub>10</sub> &#x3D; 11111111<sub>2</sub> &#x3D; FFH ，8<sub>10</sub>&#x3D; 00001000<sub>2</sub> &#x3D; 08H<br>  8是大于-1的，但是补码的话 FFH &gt; 08H，这与实际结果正好相反。<br>  移码通过加上一个偏置值（若数据为 n 位，则通常取偏置值为2<sup></sup>，将符号位取反即可），能够反映数据之间的实际大小关系。<br>  移码表示 −1<sub>10</sub>&#x3D; 01111111<sub>2</sub>&#x3D; 7FH ， 8<sub>10</sub>&#x3D; 10001000<sub>2</sub> &#x3D; 88H<br>88H &gt; 7FH 这与预期结果相符合。</p></li><li><p>阶码偏移值（偏置值）<br>阶码部分用移码表示，假设阶码为 n 位，则规定阶码偏置值取 2<sup>n-1</sup> −1，因此短浮点数、长浮点数、临时浮点数阶码偏置值为移码偏置值不是2<sup>n-1</sup>,为什么是2<sup>n-1</sup>-1，因为阶码全1是用来表示特殊用途。</p></li><li><p>阶码的取值范围<br>假设阶码为 n 位，则可表示的范围为 0 到 2<sup>10</sup> -1,因此短浮点数、长浮点数的阶码取值范围为 0到255、0到2047。又因为当阶码全0、阶码全1时有特殊用途，所以阶码E的实际取值范围为 1到254、1到2046（去掉阶码全0和全1）。</p></li></ol></blockquote>
              </div>
            </details></li>
</ul>
<h4 id="浮点数的三种编码情况"><a href="#浮点数的三种编码情况" class="headerlink" title="浮点数的三种编码情况"></a>浮点数的三种编码情况</h4><p>根据IEEE754标准的编码的值分为（规格化，非规格化，特殊值）这三种情况</p>
<h5 id="规格化的值"><a href="#规格化的值" class="headerlink" title="规格化的值"></a>规格化的值</h5><p>当阶码部分全为0也不全为1时，即为规格化的值。</p>
<p>对于尾数部分，预定小数点左边隐含有一位1，因此单精度浮点数的有效位数为24位，即位数为1.a<sub>1</sub>..a<sub>23</sub></p>
<h5 id="非规格化"><a href="#非规格化" class="headerlink" title="非规格化"></a>非规格化</h5><p>当阶码部分全为0，即为非规格化的值。</p>
<p>可以这样理解当一个很小的小数，再进行一般规格化处理时，向左偏移了最大偏移量127次以后，阶码部分是0</p>
<p>非规格化的两个用途：</p>
<blockquote>
<ol>
<li><p>用来表示数值0</p>
<p>当符号位为1，其余皆为零时，此时为+0.0，而符号位为0时为-0.0.</p>
</li>
<li><p>无限接近0的数</p>
<p>因为规格化的表示方法下无法表示出0 (因为尾数始终大于1)，所以要使用非规格化的值。</p>
</li>
</ol>
</blockquote>
<h5 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h5><p>当阶码部分全为1时，即为特殊值</p>
<blockquote>
<p>当尾数部分全为零时，表示无穷大。</p>
<p>当尾数部分不全为零时，表示NaN（不是一个数）</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>计组</tag>
        <tag>浮点数</tag>
      </tags>
  </entry>
</search>
